/*
 * Copyright (c) 2018, [Ribose Inc](https://www.ribose.com).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1.  Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 * 2.  Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include <rnp/rnp_types.h>
#include "pgp-key.h"
#include "crypto.h"
#include <string.h>

bool
pswd_provider_example(const pgp_password_ctx_t *ctx,
                      char *                    password,
                      size_t                    password_size,
                      void *                    userdata)
{
    const char *passc = "password";

    /* return password only for the operation specified in param, to make sure we decrypted
     * using key or using password */
    if (ctx->op != *((uint8_t *) userdata)) {
        return false;
    }

    if (strlen(passc) >= (password_size - 1)) {
        return false;
    }

    strncpy(password, passc, password_size - 1);
    return true;
}

bool
load_encrypted_file(char *buffer, size_t maxlen, size_t *read)
{
    FILE *  efile = NULL;
    ssize_t dataread = 0;

    if (!(efile = fopen("encrypted.asc", "r"))) {
        fprintf(stdout,
                "failed to read encrypted data from file: run ./encrypt example first\n");
        return false;
    }
    dataread = fread(buffer, 1, maxlen, efile);
    fclose(efile);
    if ((dataread < 0) || ((size_t) dataread == maxlen)) {
        fprintf(stdout, "failed to read encrypted data\n");
        return false;
    }
    *read = dataread;
    return true;
}

int
decrypt_highlevel_key()
{
    rnp_t        rnp = {};
    rnp_params_t params = {};
    rnp_ctx_t    ctx = {};
    int          result = 1;
    char         encrypted_message[10000] = {0};
    size_t       encrypted_len = 0;
    char         decrypted_message[10000] = {0};
    size_t       decrypted_len = 0;
    uint8_t      op = PGP_OP_DECRYPT;

    /* setup rnp parameters */
    rnp_params_init(&params);
    params.pubpath = strdup("pubring.pgp");
    params.secpath = strdup("secring.pgp");
    params.ks_pub_format = RNP_KEYSTORE_GPG;
    params.ks_sec_format = RNP_KEYSTORE_GPG;
    params.password_provider = {.callback = pswd_provider_example, .userdata = &op};

    /* initialize rnp structure */
    if (rnp_init(&rnp, &params) != RNP_SUCCESS) {
        fprintf(stdout, "failed to init rnp");
        goto finish;
    }

    /* load keys - you should have keys, generated by the generate example */
    if (!rnp_key_store_load_keys(&rnp, true)) {
        fprintf(stdout, "failed to load keyrings: run ./generate example first\n");
        goto finish;
    }

    /* initalize context with data from rnp_t */
    if (rnp_ctx_init(&ctx, &rnp) != RNP_SUCCESS) {
        fprintf(stdout, "failed to initialize context\n");
        goto finish;
    }

    /* load encrypted file to memory */
    if (!load_encrypted_file(encrypted_message, sizeof(encrypted_message), &encrypted_len)) {
        goto finish;
    }

    /* Decrypt the data in memory. You may use rnp_process_file to work with files as well */
    if (rnp_process_mem(&ctx,
                        encrypted_message,
                        encrypted_len,
                        decrypted_message,
                        sizeof(decrypted_message),
                        &decrypted_len) != RNP_SUCCESS) {
        fprintf(stdout, "decryption failed\n");
        goto finish;
    }

    fprintf(
      stdout, "Decrypted message, key used:\n%.*s\n", (int) decrypted_len, decrypted_message);
    result = 0;
finish:
    rnp_ctx_free(&ctx);
    rnp_params_free(&params);
    rnp_end(&rnp);
    return result;
}

int
decrypt_highlevel_password()
{
    rnp_t        rnp = {};
    rnp_params_t params = {};
    rnp_ctx_t    ctx = {};
    int          result = 1;
    char         encrypted_message[10000] = {0};
    size_t       encrypted_len = 0;
    char         decrypted_message[10000] = {0};
    size_t       decrypted_len = 0;
    uint8_t      op = PGP_OP_DECRYPT_SYM;

    /* setup rnp parameters */
    rnp_params_init(&params);
    params.pubpath = strdup("");
    params.secpath = strdup("");
    params.ks_pub_format = RNP_KEYSTORE_GPG;
    params.ks_sec_format = RNP_KEYSTORE_GPG;
    params.password_provider = {.callback = pswd_provider_example, .userdata = &op};
    params.keystore_disabled = true;

    /* initialize rnp structure */
    if (rnp_init(&rnp, &params) != RNP_SUCCESS) {
        fprintf(stdout, "failed to init rnp");
        goto finish;
    }

    /* do not load keys - we decrypt with password */
    /* initalize context with data from rnp_t */
    if (rnp_ctx_init(&ctx, &rnp) != RNP_SUCCESS) {
        fprintf(stdout, "failed to initialize context\n");
        goto finish;
    }

    /* load encrypted file to memory */
    if (!load_encrypted_file(encrypted_message, sizeof(encrypted_message), &encrypted_len)) {
        goto finish;
    }

    /* Decrypt the data in memory. You may use rnp_process_file to work with files as well */
    if (rnp_process_mem(&ctx,
                        encrypted_message,
                        encrypted_len,
                        decrypted_message,
                        sizeof(decrypted_message),
                        &decrypted_len) != RNP_SUCCESS) {
        fprintf(stdout, "decryption failed\n");
        goto finish;
    }

    fprintf(stdout,
            "Decrypted message, password used:\n%.*s\n",
            (int) decrypted_len,
            decrypted_message);
    result = 0;
finish:
    rnp_ctx_free(&ctx);
    rnp_params_free(&params);
    rnp_end(&rnp);
    return result;
}

int
main(int argc, char **argv)
{
    int res;
    res = decrypt_highlevel_key();
    if (res) {
        return res;
    }
    res = decrypt_highlevel_password();
    return res;
}